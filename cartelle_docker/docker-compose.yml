version: '3.2'
services:
  service1:
    stdin_open: true 
    tty: true
    build:
      context: ./astarix_docker
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ./output_gen
        target: /astarix/output
      - type: bind
        source: ./shared_input
        target: /astarix/input_data
    command: 
      - /bin/bash 
      - -c 
      - |
        { time release/astarix align-optimal -a astar-seeds -g input_data/input_data/benchmark_input/a_ebola.gfa -q input_data/read2.fa --fixed_trie_depth 1 --seeds_len 10 -G 1 -v 1 -o output/ > output/out/a_astarix.log 2>&1 ; }  2> output/time/a_astarix.log
    # { time release/astarix align-optimal -a astar-seeds -g input_data/input_data/grafi_umani/C490.gfa -q input_data/read2.fa --fixed_trie_depth 1 --seeds_len 10 -G 1 -v 1 -o output/ > output/out/c_astarix.log 2>&1 ; }  2> output/time/c_astarix.log

  service2:
    stdin_open: true 
    tty: true
    build:
      context: ./GraphAligner_docker
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ./output_gen
        target: /GraphAligner/output
      - type: bind
        source: ./shared_input
        target: /GraphAligner/input_data
    command: 
      - /bin/bash 
      - -c 
      - |
        { time GraphAligner -g input_data/input_data/benchmark_input/a_ebola.gfa -f input_data/read2.fa -a output/out/a_GA.gaf -x vg > /dev/null 2>&1 ; } 2> output/time/a_GA.log 
        { time GraphAligner -g input_data/input_data/benchmark_input/b_cov.gfa -f input_data/input_data/SARS-CoV2.fa -a output/out/b_GA.gaf -x vg > /dev/null 2>&1 ; } 2> output/time/b_GA.log 
        { time GraphAligner -g input_data/input_data/grafi_umani/C490.gfa -f input_data/input_data/reads_umane/C4-96.fa -a output/out/c_GA.gaf -x vg --max-cluster-extend -1 --seeds-mum-count -1 --tangle-effort -1 > /dev/null 2>&1 ; } 2> output/time/c_GA.log 
        { time GraphAligner -g input_data/input_data/grafi_umani/MHC-57.gfa -f input_data/input_data/reads_umane/MHC-57.fa -a output/out/d_GA.gaf -x vg > /dev/null 2>&1 ; } 2> output/time/d_GA.log 


  # service3:
  #   stdin_open: true 
  #   tty: true
  #   image: nvidia/cuda:11.8.0-base-ubuntu20.04
  #   # command: nvidia-smi
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   build:
  #     context: ./hga_docker
  #     dockerfile: Dockerfile
  #   volumes:
  #     - type: bind
  #       source: ./output_gen
  #       target: /hga/output
  #     - type: bind
  #       source: ./shared_input
  #       target: /hga/input_data
  #   # command: /bin/bash -c "make all"
  #   # command: /bin/bash -c "{ time ./bin/hga -g input_data/ebola.gfa -r input_data/read2.fa &> output/out/out_hga.log 2>&1 ; } 2> output/time/out_time_hga.log"

  service4:
    stdin_open: true 
    tty: true
    build:
      context: ./gwfa_docker
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ./output_gen
        target: /usr/local/gwfa/output
      - type: bind
        source: ./shared_input
        target: /usr/local/gwfa/input_data
    command: /bin/bash -c "{ time ./gwf-test input_data/ebola.gfa input_data/read2.fa > output/out/out_gwfa.log 2>&1 ; } 2> output/time/out_time_gwfa.log"

  service5:
    stdin_open: true 
    tty: true
    build:
      context: ./SGA_docker
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ./output_gen
        target: /SGA/build/output
      - type: bind
        source: ./shared_input
        target: /SGA/build/input_data
    command: /bin/bash -c "{ time ./apps/sga_example input_data/ebola.gfa input_data/read2.fa > output/out/out_sga.log 2>&1 ; } 2> output/time/out_time_sga.log"
    

  service6:
    stdin_open: true 
    tty: true
    build:
      context: ./v-align_docker
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ./output_gen
        target: /V-ALIGN/output
      - type: bind
        source: ./shared_input
        target: /V-ALIGN/input_data
    command:  /bin/bash -c "{ time ./valign -g input_data/ebola.gfa -v input_data/ebola.gfa.fvs -x input_data/read.txt -o output/out/out_valign.log > /dev/null 2>&1 ; } 2> output/time/out_time_valign.log"
    
  service7:
    stdin_open: true 
    tty: true
    build:
      context: ./vg_docker
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ./output_gen
        target: /vg/output
      - type: bind
        source: ./shared_input
        target: /vg/input_data
    command: /bin/bash -c "{ time vg map -F input_data/t1.fa -x input_data/ebola.xg -g input_data/ebola.gcsa --refpos-table --mismatch 1 --gap-open 1 --gap-extend 1 --drop-full-l-bonus -K -D -c 0 > output/out/out_vg.log 2>&1 ; } 2> output/time/out_time_vg.log"
    #     command: /bin/bash -c "{ time vg map -F input_data/t1.fa -x input_data/ebola.xg -g input_data/ebola.gcsa --gaf > output/out/out_vg.gaf 2>&1 ; } 2> output/time/out_time_vg.log"



volumes:
  shared_input:
    driver: local
    driver_opts:
      type: none
      device: /home/users/mirko.coggi/cartelle_docker/shared_input
      o: bind


  